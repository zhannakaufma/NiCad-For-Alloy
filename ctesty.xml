79 {
    Service_T s;
    ASSERT (E);
    s = Event_get_source (E);
    if (s->maillist || Run.maillist) 87 {
        Mail_T m;
        Mail_T n;
        sigset_t ns, os;
        Mail_T list = NULL;
        set_signal_block (&ns, &os);
        for (m = s->maillist; m; m = m->next) 100 {
            if (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED)) 104 {
                Mail_T tmp;
                NEW (tmp);
                copy_mail (tmp, m);
                if (Event_get_message (E)) 112 {
                    tmp->opt_message = xstrdup (Event_get_message (E));
                114}
                substitute (&tmp, s->name, EVENT_DESCRIPTION (E));
                replace_bare_linefeed (&tmp);
                tmp->next = list;
                list = tmp;
                DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m->to);
            125}
        127}
        for (m = Run.maillist; m; m = m->next) 134 {
            int skip = FALSE;
            for (n = s->maillist; n; n = n->next) 138 {
                if (IS (m->to, n->to)) 139 {
                    skip = TRUE;
                    break;
                142}
            143}
            if (!skip && (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED))) 148 {
                Mail_T tmp;
                NEW (tmp);
                copy_mail (tmp, m);
                if (Event_get_message (E))
                    tmp->opt_message = xstrdup (Event_get_message (E));
                substitute (&tmp, s->name, EVENT_DESCRIPTION (E));
                replace_bare_linefeed (&tmp);
                tmp->next = list;
                list = tmp;
                DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m->to);
            168}
        170}
        if (list) 172 {
            sendmail (list);
            gc_mail_list (&list);
        177}
        unset_signal_block (&os);
    181}
183}
87 {
    Mail_T m;
    Mail_T n;
    sigset_t ns, os;
    Mail_T list = NULL;
    set_signal_block (&ns, &os);
    for (m = s->maillist; m; m = m->next) 100 {
        if (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED)) 104 {
            Mail_T tmp;
            NEW (tmp);
            copy_mail (tmp, m);
            if (Event_get_message (E)) 112 {
                tmp->opt_message = xstrdup (Event_get_message (E));
            114}
            substitute (&tmp, s->name, EVENT_DESCRIPTION (E));
            replace_bare_linefeed (&tmp);
            tmp->next = list;
            list = tmp;
            DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m->to);
        125}
    127}
    for (m = Run.maillist; m; m = m->next) 134 {
        int skip = FALSE;
        for (n = s->maillist; n; n = n->next) 138 {
            if (IS (m->to, n->to)) 139 {
                skip = TRUE;
                break;
            142}
        143}
        if (!skip && (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED))) 148 {
            Mail_T tmp;
            NEW (tmp);
            copy_mail (tmp, m);
            if (Event_get_message (E))
                tmp->opt_message = xstrdup (Event_get_message (E));
            substitute (&tmp, s->name, EVENT_DESCRIPTION (E));
            replace_bare_linefeed (&tmp);
            tmp->next = list;
            list = tmp;
            DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m->to);
        168}
    170}
    if (list) 172 {
        sendmail (list);
        gc_mail_list (&list);
    177}
    unset_signal_block (&os);
181}
100 {
    if (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED)) 104 {
        Mail_T tmp;
        NEW (tmp);
        copy_mail (tmp, m);
        if (Event_get_message (E)) 112 {
            tmp->opt_message = xstrdup (Event_get_message (E));
        114}
        substitute (&tmp, s->name, EVENT_DESCRIPTION (E));
        replace_bare_linefeed (&tmp);
        tmp->next = list;
        list = tmp;
        DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m->to);
    125}
127}
104 {
    Mail_T tmp;
    NEW (tmp);
    copy_mail (tmp, m);
    if (Event_get_message (E)) 112 {
        tmp->opt_message = xstrdup (Event_get_message (E));
    114}
    substitute (&tmp, s->name, EVENT_DESCRIPTION (E));
    replace_bare_linefeed (&tmp);
    tmp->next = list;
    list = tmp;
    DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m->to);
125}
112 {
    tmp->opt_message = xstrdup (Event_get_message (E));
114}
134 {
    int skip = FALSE;
    for (n = s->maillist; n; n = n->next) 138 {
        if (IS (m->to, n->to)) 139 {
            skip = TRUE;
            break;
        142}
    143}
    if (!skip && (IS_EVENT_SET (m->events, Event_get_id (E)) || (Event_get_id (E) == EVENT_FAILED))) 148 {
        Mail_T tmp;
        NEW (tmp);
        copy_mail (tmp, m);
        if (Event_get_message (E))
            tmp->opt_message = xstrdup (Event_get_message (E));
        substitute (&tmp, s->name, EVENT_DESCRIPTION (E));
        replace_bare_linefeed (&tmp);
        tmp->next = list;
        list = tmp;
        DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m->to);
    168}
170}
138 {
    if (IS (m->to, n->to)) 139 {
        skip = TRUE;
        break;
    142}
143}
139 {
    skip = TRUE;
    break;
142}
148 {
    Mail_T tmp;
    NEW (tmp);
    copy_mail (tmp, m);
    if (Event_get_message (E))
        tmp->opt_message = xstrdup (Event_get_message (E));
    substitute (&tmp, s->name, EVENT_DESCRIPTION (E));
    replace_bare_linefeed (&tmp);
    tmp->next = list;
    list = tmp;
    DEBUG ("%s notification is sent to %s\n", EVENT_DESCRIPTION (E), m->to);
168}
172 {
    sendmail (list);
    gc_mail_list (&list);
177}
186 {
    char host [STRLEN];
    char *now = get_RFC822date (NULL);
    ASSERT (m && name && event);
    if (gethostname (host, sizeof (host)) < 0) 193 {
        snprintf (host, STRLEN, "%s", LOCALHOST);
    195}
    replace_string (&(*m)->from, "$HOST", host);
    replace_string (&(*m)->subject, "$DATE", now);
    replace_string (&(*m)->message, "$DATE", now);
    replace_string (&(*m)->subject, "$HOST", host);
    replace_string (&(*m)->message, "$HOST", host);
    replace_string (&(*m)->subject, "$PROGRAM", name);
    replace_string (&(*m)->message, "$PROGRAM", name);
    replace_string (&(*m)->subject, "$SERVICE", name);
    replace_string (&(*m)->message, "$SERVICE", name);
    replace_string (&(*m)->subject, "$EVENT", event);
    replace_string (&(*m)->message, "$EVENT", event);
    FREE (now);
211}
193 {
    snprintf (host, STRLEN, "%s", LOCALHOST);
195}
214 {
    ASSERT (n && o);
    n->to = xstrdup (o->to);
    n->from = o->from ? xstrdup (o->from) : Run.MailFormat.from ? xstrdup (Run.MailFormat.from) : xstrdup (ALERT_FROM);
    n->subject = o->subject ? xstrdup (o->subject) : Run.MailFormat.subject ? xstrdup (Run.MailFormat.subject) : xstrdup (ALERT_SUBJECT);
    n->message = o->message ? xstrdup (o->message) : Run.MailFormat.message ? xstrdup (Run.MailFormat.message) : xstrdup (ALERT_MESSAGE);
    n->opt_message = NULL;
239}
242 {
    replace_string (&(*m)->message, "\r\n", "\n");
    replace_string (&(*m)->message, "\n", "\r\n");
    if ((*m)->opt_message) 246 {
        replace_string (&(*m)->opt_message, "\r\n", "\n");
        replace_string (&(*m)->opt_message, "\n", "\r\n");
    249}
251}
246 {
    replace_string (&(*m)->opt_message, "\r\n", "\n");
    replace_string (&(*m)->opt_message, "\n", "\r\n");
249}
