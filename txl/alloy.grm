comments
    //
    --
    /* */
end comments

% name
compounds
    => >= -> <: :> ++ || && <=>
end compounds

keys 
    'abstract       'after       'all         'always       'and
    'as             'assert      'before     'but          'check
    'disj           'else        'enabled     'event        'eventually
    'exactly        'extends     'fact        'for          'fun
    'historically   'iden        'iff         'implies      'in
    'Int            'invariant   'let         'lone         'modifies
    'module         'no          'none        'not          'once   
    'one            'open        'or          'pred         'releases
    'run            'set         'sig         'since        'some
    'steps          'sum         'triggered   'univ         'until
    'var 
    
end keys

tokens
    name "[\a][\a\d_\"]*"
    %number "0|([1-9]\d*)"
end tokens

define program
    [alloyModule]
end define

define alloyModule
    [opt moduleDecl] [repeat importRule] [repeat paragraph]
end define


define moduleDecl
    'module [qualName] [opt nameListPlus]
end define

define nameListPlus
    '[ [list name +] [opt ',] ']
end define

define qualNameListPlus
    '[ [list qualName +] [opt ',] ']
end define

define importRule     % normally called import
    'open [qualName] [opt qualNameListPlus] [opt asName]
end define

define asName
    'as [name]
end define



define paragraph
    [sigDecl] | [factDecl] | [predDecl] | [funDecl] | [assertDecl] | [cmdDecl]
end define

define sigDecl
    [opt 'abstract] [opt mult] 'sig [list name] [opt sigExt] { [list decl] [opt ',] } [opt block]
end define

define decl
    [opt 'disj] [list name +] ': [opt 'disj] [expr]
end define

define sigExt
    'extends [qualName] | 'in [qualName] [repeat plusQualName]
end define

define plusQualName
    '+ [qualName]
end define

define mult
    'lone | 'some | 'one
end define

define factDecl
    'fact [opt name] [block]
end define

define predDecl
    'pred [opt qualNameDot] [name] [opt paraDecls] [block]
end define 

define qualNameDot
    [qualName] .
end define

define funDecl
    'fun [opt qualNameDot] [name] [opt paraDecls] ': [expr] { [expr] }
end define

define paraDecls
    '( [list decl] [opt ',] ') | '[ [list decl] [opt ',] ']
end define

define assertDecl
    'assert [opt name] [block]
end define

define cmdDecl
    [opt nameColon] [opt runOrCheck] [opt qualNameOrBlock] [opt scope]
end define

define nameColon
    [name] ':
end define

define runOrCheck
    'run | 'check
end define

define qualNameOrBlock
    [qualName] | [block]
end define

define typescope
    [opt 'exactly] [number] [qualName]
end define

define scope
    'for [number] | [opt butTypeScopeListPlus] | 'for [list typescope +]
end define

define butTypeScopeListPlus
    'but [list typescope+]
end define


define expr
    [block_expr]
end define

define block_expr
    [block]
    | '{ [list decl+] [opt ',] [blockOrBar] }
    | [quant] [opt 'disj] [list decl+] [blockOrBar]
    | 'let [list letDecl+] [blockOrBar]
    | [disj_expr]
end define



define disj_expr
    [disj_expr] '|| [bi_imp_expr]
    | [disj_expr] 'or [bi_imp_expr]
    | [bi_imp_expr]
end define

define bi_imp_expr
    [bi_imp_expr] '<=> [impl_expr]
    | [bi_imp_expr] 'iff [impl_expr]
    | [impl_expr]
end define

define impl_expr
    [conj_expr] [implication] [impl_expr] [opt else_expr]
    | [conj_expr]
end define

define else_expr
    'else [expr]
end define


define conj_expr
    [conj_expr] '&& [negation_expr]
    | [conj_expr] 'and [negation_expr]
    | [negation_expr]
end define


define negation_expr
    [negation] [negation_expr] | [comp_expr]
end define

define comp_expr
    [comp_expr] [opt negation] [compareOp] [quant_mult_expr]
    | [quant_mult_expr]
end define

define quant_mult_expr
    [quant_mult_op] [union_diff_expr]
    | [union_diff_expr]
end define

define quant_mult_op
    'no | 'some | 'lone | 'one | 'set
end define

define union_diff_expr
    [union_diff_expr] '+ [card_expr]
    | [union_diff_expr] '- [card_expr]
    | [card_expr]
end define  

define card_expr
    '# [override_expr] | [override_expr]
end define

define override_expr
    [override_expr] '++ [intersect_expr]
    | [intersect_expr]
end define


define intersect_expr
    [intersect_expr] '& [restrict_expr]
    | [arrow_expr]
end define

define arrow_expr
    [arrow_expr] [arrowOp] [restrict_expr]
    | [restrict_expr]
end define

define restrict_expr
    [restrict_expr] ':> [box_join_expr]
    | [restrict_expr] '<: [box_join_expr]
    | [box_join_expr]
end define

define box_join_expr
    [box_join_expr] '[ [list expr] '] '. [dot_join_expr]
    | [box_join_expr] '[ [list expr] ']
    | 'disj '[ [list expr] ']
    | 'disj '[ [list expr] '] '. [dot_join_expr]
    | [dot_join_expr]
end define

define dot_join_expr
    [box_join_expr] '. [un_expr]
    | [un_expr]
end define

define un_expr
    [unOp] [expr] | '( [expr] ') | 'this | '@ [name] | [qualName] | [const]
end define


define implication
    '=> | 'implies
end define

define negation
    '! | 'not
end define

define const
    [opt '-] [number] | none | univ | iden
end define 

define unOp
    ! | 'not | no | [mult] | set | # | ~ | * | ^
end define

define binOp
    || | or | && | and | <=> | iff | => | implies | & | + | - | ++ | <: | :>
end define

define arrowOp
    [opt multorset] '-> [opt multorset]
end define

define multorset
    [mult] | set
end define

define compareOp
    in | = | < | > | =< | >=
end define 

define letDecl
    [name] = [expr]
end define

define block
    '{ [IN] [repeat expr] [EX] '} [NL][NL]
end define

define blockOrBar
    [block] | [bar] [expr]
end define

define quant
    'all | no | sum | [mult]
end define

define bar
    '|
end define

define nameslash
    [name] /
end define

define qualName 
    [opt this_slash] [nameslash*] [name]
end define 

define this_slash
    'this /
end define

